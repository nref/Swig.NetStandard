//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class native_wrapPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="SWIGRegisterExceptionCallbacks_native_wrap")]
    public static extern void SWIGRegisterExceptionCallbacks_native_wrap(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_native_wrap")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_native_wrap(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_native_wrap(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_native_wrap(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="SWIGRegisterStringCallback_native_wrap")]
    public static extern void SWIGRegisterStringCallback_native_wrap(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_native_wrap(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static native_wrapPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ITest_SetValue")]
  public static extern void ITest_SetValue(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ITest_GetValue")]
  public static extern int ITest_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ITest")]
  public static extern void delete_ITest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_Test")]
  public static extern global::System.IntPtr new_Test();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_SetValue")]
  public static extern void Test_SetValue(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_SetValueSwigExplicitTest")]
  public static extern void Test_SetValueSwigExplicitTest(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_GetValue")]
  public static extern int Test_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_GetValueSwigExplicitTest")]
  public static extern int Test_GetValueSwigExplicitTest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_Test")]
  public static extern void delete_Test(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_Value_set")]
  public static extern void Test_Value_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_Value_get")]
  public static extern int Test_Value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_director_connect")]
  public static extern void Test_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, Test.SwigDelegateTest_0 delegate0, Test.SwigDelegateTest_1 delegate1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_HasTest")]
  public static extern global::System.IntPtr new_HasTest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_SetValue")]
  public static extern void HasTest_SetValue(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_SetValueSwigExplicitHasTest")]
  public static extern void HasTest_SetValueSwigExplicitHasTest(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_GetValue")]
  public static extern int HasTest_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_GetValueSwigExplicitHasTest")]
  public static extern int HasTest_GetValueSwigExplicitHasTest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_HasTest")]
  public static extern void delete_HasTest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_director_connect")]
  public static extern void HasTest_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, HasTest.SwigDelegateHasTest_0 delegate0, HasTest.SwigDelegateHasTest_1 delegate1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_add_cb_get")]
  public static extern global::System.IntPtr add_cb_get();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_add")]
  public static extern double add(int jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsVoidDirector")]
  public static extern void delete_ReturnsVoidDirector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsVoidDirector_Invoke")]
  public static extern void ReturnsVoidDirector_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsVoidDirector")]
  public static extern global::System.IntPtr new_ReturnsVoidDirector();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsVoidDirector_director_connect")]
  public static extern void ReturnsVoidDirector_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, ReturnsVoidDirector.SwigDelegateReturnsVoidDirector_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsVoid__SWIG_0")]
  public static extern global::System.IntPtr new_ReturnsVoid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsVoid_Invoke")]
  public static extern void ReturnsVoid_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsVoid__SWIG_1")]
  public static extern global::System.IntPtr new_ReturnsVoid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsVoid__SWIG_2")]
  public static extern global::System.IntPtr new_ReturnsVoid__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsVoid")]
  public static extern void delete_ReturnsVoid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsDoubleDirector")]
  public static extern void delete_ReturnsDoubleDirector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsDoubleDirector_Invoke")]
  public static extern double ReturnsDoubleDirector_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsDoubleDirector")]
  public static extern global::System.IntPtr new_ReturnsDoubleDirector();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsDoubleDirector_director_connect")]
  public static extern void ReturnsDoubleDirector_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, ReturnsDoubleDirector.SwigDelegateReturnsDoubleDirector_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsDouble__SWIG_0")]
  public static extern global::System.IntPtr new_ReturnsDouble__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsDouble_Invoke")]
  public static extern double ReturnsDouble_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsDouble__SWIG_1")]
  public static extern global::System.IntPtr new_ReturnsDouble__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsDouble__SWIG_2")]
  public static extern global::System.IntPtr new_ReturnsDouble__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsDouble")]
  public static extern void delete_ReturnsDouble(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_string_side_effect_set")]
  public static extern void string_side_effect_set(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_string_side_effect_get")]
  public static extern string string_side_effect_get();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_double_side_effect_set")]
  public static extern void double_side_effect_set(double jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_double_side_effect_get")]
  public static extern double double_side_effect_get();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Input_Value_set")]
  public static extern void Input_Value_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Input_Value_get")]
  public static extern string Input_Value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_Input")]
  public static extern global::System.IntPtr new_Input();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_Input")]
  public static extern void delete_Input(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_Output")]
  public static extern global::System.IntPtr new_Output(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Output_Input_set")]
  public static extern void Output_Input_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Output_Input_get")]
  public static extern global::System.IntPtr Output_Input_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_Output")]
  public static extern void delete_Output(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_make_set_string_side_effect_callback")]
  public static extern global::System.IntPtr make_set_string_side_effect_callback();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_test_shared_ptr")]
  public static extern global::System.IntPtr test_shared_ptr();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_make_add_set_double_side_effect_callback")]
  public static extern global::System.IntPtr make_add_set_double_side_effect_callback();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_invoke_callback")]
  public static extern double invoke_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsSharedPtrDirector")]
  public static extern void delete_ReturnsSharedPtrDirector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsSharedPtrDirector_Invoke")]
  public static extern global::System.IntPtr ReturnsSharedPtrDirector_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsSharedPtrDirector")]
  public static extern global::System.IntPtr new_ReturnsSharedPtrDirector();

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsSharedPtrDirector_director_connect")]
  public static extern void ReturnsSharedPtrDirector_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, ReturnsSharedPtrDirector.SwigDelegateReturnsSharedPtrDirector_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsSharedPtr__SWIG_0")]
  public static extern global::System.IntPtr new_ReturnsSharedPtr__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_ReturnsSharedPtr_Invoke")]
  public static extern global::System.IntPtr ReturnsSharedPtr_Invoke(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsSharedPtr__SWIG_1")]
  public static extern global::System.IntPtr new_ReturnsSharedPtr__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_new_ReturnsSharedPtr__SWIG_2")]
  public static extern global::System.IntPtr new_ReturnsSharedPtr__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_delete_ReturnsSharedPtr")]
  public static extern void delete_ReturnsSharedPtr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_Test_SWIGSmartPtrUpcast")]
  public static extern global::System.IntPtr Test_SWIGSmartPtrUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("native_wrap", EntryPoint="CSharp_HasTest_SWIGSmartPtrUpcast")]
  public static extern global::System.IntPtr HasTest_SWIGSmartPtrUpcast(global::System.IntPtr jarg1);
}
