//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ReturnsVoid : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ReturnsVoid(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ReturnsVoid obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ReturnsVoid() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          native_wrapPINVOKE.delete_ReturnsVoid(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


        //public delegate void ReturnsVoid##Delegate(FOR_EACH(param, std::string));
        public delegate void ReturnsVoidDelegate(/*@SWIG:std_function.i,26,FOR_EACH@*/ 
  string arg0
/*@SWIG@*/);
                
        public class ConcreteDirector : ReturnsVoidDirector
        {
            public ConcreteDirector(ReturnsVoidDelegate f)
            {
                _f = f;
            }

            //protected override void Invoke(FOR_EACH(param, std::string))
            protected override void Invoke(/*@SWIG:std_function.i,26,FOR_EACH@*/ 
  string arg0
/*@SWIG@*/)
            {
                _f.Invoke(/*@SWIG:std_function.i,26,FOR_EACH@*/ 
  arg0
/*@SWIG@*/);
            }

            private readonly ReturnsVoidDelegate _f;
        }

        public ReturnsVoid(ReturnsVoidDelegate callback) 
        {
            _director = new ConcreteDirector(callback);
            _proxy = new ReturnsVoid(_director);
        }

        public static ReturnsVoid makeNative(ReturnsVoid f) {
            return null == f._director
                ? f
                : f._proxy;
        }

        private readonly ReturnsVoidDirector _director;
        private readonly ReturnsVoid _proxy;
    
  public ReturnsVoid(ReturnsVoid arg0) : this(native_wrapPINVOKE.new_ReturnsVoid__SWIG_0(ReturnsVoid.getCPtr(arg0)), true) {
    if (native_wrapPINVOKE.SWIGPendingException.Pending) throw native_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Invoke(string arg0) {
    native_wrapPINVOKE.ReturnsVoid_Invoke(swigCPtr, arg0);
    if (native_wrapPINVOKE.SWIGPendingException.Pending) throw native_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public ReturnsVoid(SWIGTYPE_p_f_std__string__void arg0) : this(native_wrapPINVOKE.new_ReturnsVoid__SWIG_1(SWIGTYPE_p_f_std__string__void.getCPtr(arg0)), true) {
  }

  public ReturnsVoid(ReturnsVoidDirector in_) : this(native_wrapPINVOKE.new_ReturnsVoid__SWIG_2(ReturnsVoidDirector.getCPtr(in_)), true) {
  }

}
