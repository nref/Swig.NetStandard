//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class HasTest : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal HasTest(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HasTest obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HasTest() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          native_wrapPINVOKE.delete_HasTest(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public HasTest(ITest test) : this(native_wrapPINVOKE.new_HasTest(ITest.getCPtr(test)), true) {
    if (native_wrapPINVOKE.SWIGPendingException.Pending) throw native_wrapPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual void SetValue(int value) {
    if (SwigDerivedClassHasMethod("SetValue", swigMethodTypes0)) native_wrapPINVOKE.HasTest_SetValueSwigExplicitHasTest(swigCPtr, value); else native_wrapPINVOKE.HasTest_SetValue(swigCPtr, value);
    if (native_wrapPINVOKE.SWIGPendingException.Pending) throw native_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetValue() {
    int ret = (SwigDerivedClassHasMethod("GetValue", swigMethodTypes1) ? native_wrapPINVOKE.HasTest_GetValueSwigExplicitHasTest(swigCPtr) : native_wrapPINVOKE.HasTest_GetValue(swigCPtr));
    if (native_wrapPINVOKE.SWIGPendingException.Pending) throw native_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SetValue", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHasTest_0(SwigDirectorMethodSetValue);
    if (SwigDerivedClassHasMethod("GetValue", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHasTest_1(SwigDirectorMethodGetValue);
    native_wrapPINVOKE.HasTest_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HasTest));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodSetValue(int value) {
    SetValue(value);
  }

  private int SwigDirectorMethodGetValue() {
    return GetValue();
  }

  public delegate void SwigDelegateHasTest_0(int value);
  public delegate int SwigDelegateHasTest_1();

  private SwigDelegateHasTest_0 swigDelegate0;
  private SwigDelegateHasTest_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
}
